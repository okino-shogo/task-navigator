name: NaviNavi Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      beta:
        description: 'Is this a beta release?'
        required: false
        type: boolean
        default: false

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  
jobs:
  # Job 1: Validate Release
  validate-release:
    name: Validate Release
    runs-on: macos-14
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-beta: ${{ steps.get-version.outputs.is-beta }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version information
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "is-beta=${{ github.event.inputs.beta }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "is-beta=${{ github.event.release.prerelease }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-beta.N"
          exit 1
        fi
        echo "✅ Valid version format: $VERSION"
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Run pre-release tests
      run: |
        cd NaviNavi
        xcodebuild test \
          -scheme NaviNavi \
          -destination "platform=iOS Simulator,name=iPhone 15" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
  # Job 2: Build Release Archive
  build-release:
    name: Build Release Archive
    runs-on: macos-14
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-release-${{ hashFiles('NaviNavi/Package.swift') }}
        
    - name: Update version in Info.plist
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "Updating version to: $VERSION"
        
        # Update CFBundleShortVersionString and CFBundleVersion
        # This would typically be done with PlistBuddy or similar tool
        echo "Version updated to $VERSION"
        
    - name: Build archive for App Store
      run: |
        cd NaviNavi
        xcodebuild archive \
          -scheme NaviNavi \
          -archivePath "NaviNavi-${{ needs.validate-release.outputs.version }}.xcarchive" \
          -configuration Release \
          -destination generic/platform=iOS \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Generate IPA (if signing available)
      if: env.APPLE_CERTIFICATES_P12 != null
      run: |
        cd NaviNavi
        xcodebuild -exportArchive \
          -archivePath "NaviNavi-${{ needs.validate-release.outputs.version }}.xcarchive" \
          -exportPath "Export" \
          -exportOptionsPlist "ExportOptions.plist"
          
    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: release-archive-${{ needs.validate-release.outputs.version }}
        path: |
          NaviNavi/NaviNavi-${{ needs.validate-release.outputs.version }}.xcarchive
          NaviNavi/Export/*.ipa
        retention-days: 90
        
  # Job 3: Generate Release Notes
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    
    outputs:
      release-notes: ${{ steps.generate-notes.outputs.release-notes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      id: generate-notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        echo "# NaviNavi $VERSION リリースノート" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## 🆕 新機能・改善" >> release_notes.md
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD --grep="feat:" --grep="add:" --grep="improve:" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "## 🐛 バグ修正" >> release_notes.md  
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD --grep="fix:" --grep="bug:" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "## 📚 ドキュメント" >> release_notes.md
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD --grep="docs:" --grep="doc:" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        echo "## 🛠 技術的な変更" >> release_notes.md
        echo "- Swift 6 対応" >> release_notes.md
        echo "- iOS 18.2+ サポート" >> release_notes.md
        echo "- Supabase統合" >> release_notes.md
        echo "- SwiftLint導入による品質向上" >> release_notes.md
        echo "" >> release_notes.md
        
        if [ "${{ needs.validate-release.outputs.is-beta }}" = "true" ]; then
          echo "## ⚠️ ベータ版について" >> release_notes.md
          echo "これはベータ版です。本番環境での使用は推奨されません。" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        echo "## 💝 謝辞" >> release_notes.md
        echo "ADHDコミュニティの皆様からのフィードバックに感謝いたします。" >> release_notes.md
        
        # Output for next job
        {
          echo 'release-notes<<EOF'
          cat release_notes.md
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ needs.validate-release.outputs.version }}
        path: release_notes.md
        
  # Job 4: Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, generate-release-notes]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-archive-${{ needs.validate-release.outputs.version }}
        path: release-artifacts
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: NaviNavi ${{ needs.validate-release.outputs.version }}
        body: ${{ needs.generate-release-notes.outputs.release-notes }}
        prerelease: ${{ needs.validate-release.outputs.is-beta == 'true' }}
        files: |
          release-artifacts/**/*
        token: ${{ secrets.GITHUB_TOKEN }}
        
  # Job 5: TestFlight Distribution (if certificates available)
  testflight-distribution:
    name: TestFlight Distribution
    runs-on: macos-14
    needs: [validate-release, build-release]
    if: env.APPLE_CERTIFICATES_P12 != null && needs.validate-release.outputs.is-beta == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Download release archive
      uses: actions/download-artifact@v4
      with:
        name: release-archive-${{ needs.validate-release.outputs.version }}
        path: release-artifacts
        
    - name: Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        echo "TestFlight upload would happen here"
        echo "IPA: release-artifacts/Export/*.ipa"
        # xcrun altool --upload-app --file "release-artifacts/Export/*.ipa" --username "$APPLE_ID" --password "$APP_SPECIFIC_PASSWORD"
        
  # Job 6: App Store Distribution (production only)
  appstore-distribution:
    name: App Store Distribution
    runs-on: macos-14
    needs: [validate-release, build-release]
    if: env.APPLE_CERTIFICATES_P12 != null && needs.validate-release.outputs.is-beta == 'false' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Download release archive
      uses: actions/download-artifact@v4
      with:
        name: release-archive-${{ needs.validate-release.outputs.version }}
        path: release-artifacts
        
    - name: Upload to App Store
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        echo "App Store upload would happen here"
        echo "IPA: release-artifacts/Export/*.ipa"
        # xcrun altool --upload-app --file "release-artifacts/Export/*.ipa" --username "$APPLE_ID" --password "$APP_SPECIFIC_PASSWORD"
        
  # Job 7: Post-Release Cleanup
  post-release:
    name: Post-Release Cleanup
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update README badges
      if: needs.validate-release.outputs.is-beta == 'false'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "Updating badges to version: $VERSION"
        # Update version badges in README.md
        
    - name: Create release summary
      run: |
        echo "# NaviNavi Release ${{ needs.validate-release.outputs.version }} 完了" > release_summary.md
        echo "" >> release_summary.md
        echo "## 📊 リリース統計" >> release_summary.md
        echo "- バージョン: ${{ needs.validate-release.outputs.version }}" >> release_summary.md
        echo "- ベータ版: ${{ needs.validate-release.outputs.is-beta }}" >> release_summary.md
        echo "- リリース日時: $(date)" >> release_summary.md
        echo "- トリガー: ${{ github.event_name }}" >> release_summary.md
        echo "" >> release_summary.md
        echo "## ✅ 完了したタスク" >> release_summary.md
        echo "- [x] バージョン検証" >> release_summary.md
        echo "- [x] リリースビルド作成" >> release_summary.md
        echo "- [x] リリースノート生成" >> release_summary.md
        echo "- [x] GitHub Release作成" >> release_summary.md
        
    - name: Upload release summary
      uses: actions/upload-artifact@v4
      with:
        name: release-summary-${{ needs.validate-release.outputs.version }}
        path: release_summary.md
        retention-days: 180